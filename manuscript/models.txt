# Models

## Access nested models via `.get()`

Keep nested models inside attributes. This gives consistency in the cases where the nested model might change completely (e.g your user switches team), and where it'll just be fields inside the nested model changing. Trying to remember which models live on `model.{property}` and which are `model.get("{property}")` is a pain.

## Fire intention revealing events

Often changes in attributes have an app-specific meaning. For instance, often a `User` object is request on app load, and if the response is successful the users id will be set. You could listen in your views for `change:id`, but to people reading the code it's not obvious this means "login".

Wrap up the implementation details of these events with a higher-level event that describes it. That way the code is intention-revealing, and the listeners don't need to change if the implementation changes (e.g you `User` now always has an `id` but has a `isAuthorised` field).

To implement this simply have the model listen to itself and refire the higher-level event. Note this is following the "model, thing changed, options" arguments pattern of Backbone.Model for consistency:

```javascript
var User = Backbone.Model.extend({
  initialize: function() {
    this.on("change:id",function(_model,to) {
      this.fire("authorised",this,to != null);
    },this);
  }
});
```

Views now listen to the `authorised` event:

```javascript
var UserWidget = Backbone.View.extend({
  initialize: function(options) {
    this.listenTo(options.user,"authorised",this.renderAuthorised,this);
  }
});
```

## Control change

If your model isn't simply going to take in form data and post it off to the server it doesn't really make sense to allow it to accept invalid attributes. The benefit of encapsulating our data behind the `set()` gateway is we can control access. One simple way to prevent a model ever becoming invalid is to override set and make it validate by default:

```javascript
var ValidatedModel = Backbone.Model.extend({
  set: function(key,value,options) {
    if (typeof key === 'object') {
      options = value;
    }
    if(!("validate" in options)) {
      options.validate = true;
    }
    return ValidatedModel.__super__.set.apply(this,arguments);
  }
});
```

## Form models

When we're implementing forms it's good user-experience not to make a user re-enter data. This means if they're part-way through a form their input shouldn't go away - ideally even across navigation or refreshes.

Storing this invalid state can muddy the state of a model - especially if it's being updated and we don't want to lose the existing, valid, data. Again this is where a collaborating model can dramatically simplify the code. Create a form model to capture and store the input. When it's valid we can commit the state to the real model, and save it to the server. That way our real model ndoesn't require any code to handle the weird state it'll end up in during editing via the form.

// TODO ask Ben re his problem with forms and backbone

## View models

Widgets often have state - selections, partial edits, undo state. Just like domain state this often needs to be persisted - probably to a client-side store like `localStorage` or `IndexedDB`. Capturing this state in a `View` isn't a great idea: they don't have a means to observe changes, nor persist them. Far better to create `ViewModel`s to store, provide notifications for, and persist any view state.

A view-model can just be another `Backbone.Model`.

